// <auto-generated />
using System;
using Api.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(FlotillaDbContext))]
    partial class FlotillaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Api.Database.Models.IsarStep", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileLocation")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("InspectionType")
                        .HasColumnType("int");

                    b.Property<string>("IsarStepId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepStatus")
                        .HasColumnType("int");

                    b.Property<int>("StepType")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Api.Database.Models.IsarTask", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IsarTaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Api.Database.Models.Orientation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("W")
                        .HasColumnType("real");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Orientations");
                });

            modelBuilder.Entity("Api.Database.Models.Pose", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Frame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrientationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrientationId");

                    b.HasIndex("PositionId");

                    b.ToTable("Poses");
                });

            modelBuilder.Entity("Api.Database.Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Api.Database.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EchoMissionId")
                        .HasMaxLength(128)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IsarMissionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Log")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ReportStatus")
                        .HasColumnType("int");

                    b.Property<string>("RobotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RobotId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Api.Database.Models.Robot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Logs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("PoseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoseId");

                    b.ToTable("Robots");
                });

            modelBuilder.Entity("Api.Database.Models.ScheduledMission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EchoMissionId")
                        .HasMaxLength(128)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RobotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RobotId");

                    b.ToTable("ScheduledMissions");
                });

            modelBuilder.Entity("Api.Database.Models.VideoStream", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RobotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("RobotId");

                    b.ToTable("VideoStreams");
                });

            modelBuilder.Entity("Api.Database.Models.IsarStep", b =>
                {
                    b.HasOne("Api.Database.Models.IsarTask", "Task")
                        .WithMany("Steps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Api.Database.Models.IsarTask", b =>
                {
                    b.HasOne("Api.Database.Models.Report", "Report")
                        .WithMany("Tasks")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Api.Database.Models.Pose", b =>
                {
                    b.HasOne("Api.Database.Models.Orientation", "Orientation")
                        .WithMany()
                        .HasForeignKey("OrientationId");

                    b.HasOne("Api.Database.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Orientation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Api.Database.Models.Report", b =>
                {
                    b.HasOne("Api.Database.Models.Robot", "Robot")
                        .WithMany()
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Api.Database.Models.Robot", b =>
                {
                    b.HasOne("Api.Database.Models.Pose", "Pose")
                        .WithMany()
                        .HasForeignKey("PoseId");

                    b.Navigation("Pose");
                });

            modelBuilder.Entity("Api.Database.Models.ScheduledMission", b =>
                {
                    b.HasOne("Api.Database.Models.Robot", "Robot")
                        .WithMany()
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Api.Database.Models.VideoStream", b =>
                {
                    b.HasOne("Api.Database.Models.Robot", null)
                        .WithMany("VideoStreams")
                        .HasForeignKey("RobotId");
                });

            modelBuilder.Entity("Api.Database.Models.IsarTask", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Api.Database.Models.Report", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Api.Database.Models.Robot", b =>
                {
                    b.Navigation("VideoStreams");
                });
#pragma warning restore 612, 618
        }
    }
}
