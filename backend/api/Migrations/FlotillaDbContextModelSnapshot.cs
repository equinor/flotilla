// <auto-generated />
using System;
using Api.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(FlotillaDbContext))]
    partial class FlotillaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.Database.Models.Area", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeckId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstallationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("InstallationId");

                    b.HasIndex("PlantId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Api.Database.Models.Deck", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstallationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId");

                    b.HasIndex("PlantId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Api.Database.Models.Installation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstallationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("InstallationCode")
                        .IsUnique();

                    b.ToTable("Installations");
                });

            modelBuilder.Entity("Api.Database.Models.MissionDefinition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan?>("InspectionFrequency")
                        .HasColumnType("time");

                    b.Property<string>("InstallationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("LastRunId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("LastRunId");

                    b.HasIndex("SourceId");

                    b.ToTable("MissionDefinitions");
                });

            modelBuilder.Entity("Api.Database.Models.MissionRun", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("DesiredStartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EstimatedDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("InstallationCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IsarMissionId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MissionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RobotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("RobotId");

                    b.ToTable("MissionRuns");
                });

            modelBuilder.Entity("Api.Database.Models.Plant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstallationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlantCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId");

                    b.HasIndex("PlantCode")
                        .IsUnique();

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Api.Database.Models.Robot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("BatteryLevel")
                        .HasColumnType("real");

                    b.Property<string>("CurrentAreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentInstallation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMissionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IsarId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<float?>("PressureLevel")
                        .HasColumnType("real");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAreaId");

                    b.HasIndex("ModelId");

                    b.ToTable("Robots");
                });

            modelBuilder.Entity("Api.Database.Models.RobotModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("AverageDurationPerTag")
                        .HasColumnType("real");

                    b.Property<float?>("BatteryWarningThreshold")
                        .HasColumnType("real");

                    b.Property<float?>("LowerPressureWarningThreshold")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(56)");

                    b.Property<float?>("UpperPressureWarningThreshold")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("RobotModels");
                });

            modelBuilder.Entity("Api.Database.Models.SafePosition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("SafePositions");
                });

            modelBuilder.Entity("Api.Database.Models.Source", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Api.Database.Models.Area", b =>
                {
                    b.HasOne("Api.Database.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Database.Models.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Database.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Api.Database.Models.Pose", "DefaultLocalizationPose", b1 =>
                        {
                            b1.Property<string>("AreaId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("AreaId");

                            b1.ToTable("Areas");

                            b1.WithOwner()
                                .HasForeignKey("AreaId");

                            b1.OwnsOne("Api.Database.Models.Orientation", "Orientation", b2 =>
                                {
                                    b2.Property<string>("PoseAreaId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("W")
                                        .HasColumnType("real");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("PoseAreaId");

                                    b2.ToTable("Areas");

                                    b2.WithOwner()
                                        .HasForeignKey("PoseAreaId");
                                });

                            b1.OwnsOne("Api.Database.Models.Position", "Position", b2 =>
                                {
                                    b2.Property<string>("PoseAreaId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("PoseAreaId");

                                    b2.ToTable("Areas");

                                    b2.WithOwner()
                                        .HasForeignKey("PoseAreaId");
                                });

                            b1.Navigation("Orientation")
                                .IsRequired();

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Api.Database.Models.MapMetadata", "MapMetadata", b1 =>
                        {
                            b1.Property<string>("AreaId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("MapName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("AreaId");

                            b1.ToTable("Areas");

                            b1.WithOwner()
                                .HasForeignKey("AreaId");

                            b1.OwnsOne("Api.Database.Models.Boundary", "Boundary", b2 =>
                                {
                                    b2.Property<string>("MapMetadataAreaId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<double>("X1")
                                        .HasColumnType("float");

                                    b2.Property<double>("X2")
                                        .HasColumnType("float");

                                    b2.Property<double>("Y1")
                                        .HasColumnType("float");

                                    b2.Property<double>("Y2")
                                        .HasColumnType("float");

                                    b2.Property<double>("Z1")
                                        .HasColumnType("float");

                                    b2.Property<double>("Z2")
                                        .HasColumnType("float");

                                    b2.HasKey("MapMetadataAreaId");

                                    b2.ToTable("Areas");

                                    b2.WithOwner()
                                        .HasForeignKey("MapMetadataAreaId");
                                });

                            b1.OwnsOne("Api.Database.Models.TransformationMatrices", "TransformationMatrices", b2 =>
                                {
                                    b2.Property<string>("MapMetadataAreaId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<double>("C1")
                                        .HasColumnType("float");

                                    b2.Property<double>("C2")
                                        .HasColumnType("float");

                                    b2.Property<double>("D1")
                                        .HasColumnType("float");

                                    b2.Property<double>("D2")
                                        .HasColumnType("float");

                                    b2.HasKey("MapMetadataAreaId");

                                    b2.ToTable("Areas");

                                    b2.WithOwner()
                                        .HasForeignKey("MapMetadataAreaId");
                                });

                            b1.Navigation("Boundary")
                                .IsRequired();

                            b1.Navigation("TransformationMatrices")
                                .IsRequired();
                        });

                    b.Navigation("Deck");

                    b.Navigation("DefaultLocalizationPose")
                        .IsRequired();

                    b.Navigation("Installation");

                    b.Navigation("MapMetadata")
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Api.Database.Models.Deck", b =>
                {
                    b.HasOne("Api.Database.Models.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Database.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Installation");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Api.Database.Models.MissionDefinition", b =>
                {
                    b.HasOne("Api.Database.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("Api.Database.Models.MissionRun", "LastRun")
                        .WithMany()
                        .HasForeignKey("LastRunId");

                    b.HasOne("Api.Database.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("LastRun");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Api.Database.Models.MissionRun", b =>
                {
                    b.HasOne("Api.Database.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("Api.Database.Models.Robot", "Robot")
                        .WithMany()
                        .HasForeignKey("RobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Api.Database.Models.MapMetadata", "Map", b1 =>
                        {
                            b1.Property<string>("MissionRunId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("MapName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("MissionRunId");

                            b1.ToTable("MissionRuns");

                            b1.WithOwner()
                                .HasForeignKey("MissionRunId");

                            b1.OwnsOne("Api.Database.Models.Boundary", "Boundary", b2 =>
                                {
                                    b2.Property<string>("MapMetadataMissionRunId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<double>("X1")
                                        .HasColumnType("float");

                                    b2.Property<double>("X2")
                                        .HasColumnType("float");

                                    b2.Property<double>("Y1")
                                        .HasColumnType("float");

                                    b2.Property<double>("Y2")
                                        .HasColumnType("float");

                                    b2.Property<double>("Z1")
                                        .HasColumnType("float");

                                    b2.Property<double>("Z2")
                                        .HasColumnType("float");

                                    b2.HasKey("MapMetadataMissionRunId");

                                    b2.ToTable("MissionRuns");

                                    b2.WithOwner()
                                        .HasForeignKey("MapMetadataMissionRunId");
                                });

                            b1.OwnsOne("Api.Database.Models.TransformationMatrices", "TransformationMatrices", b2 =>
                                {
                                    b2.Property<string>("MapMetadataMissionRunId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<double>("C1")
                                        .HasColumnType("float");

                                    b2.Property<double>("C2")
                                        .HasColumnType("float");

                                    b2.Property<double>("D1")
                                        .HasColumnType("float");

                                    b2.Property<double>("D2")
                                        .HasColumnType("float");

                                    b2.HasKey("MapMetadataMissionRunId");

                                    b2.ToTable("MissionRuns");

                                    b2.WithOwner()
                                        .HasForeignKey("MapMetadataMissionRunId");
                                });

                            b1.Navigation("Boundary")
                                .IsRequired();

                            b1.Navigation("TransformationMatrices")
                                .IsRequired();
                        });

                    b.OwnsMany("Api.Database.Models.MissionTask", "Tasks", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<int?>("EchoPoseId")
                                .HasColumnType("int");

                            b1.Property<string>("EchoTagLink")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<DateTimeOffset?>("EndTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("IsarTaskId")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("MissionRunId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTimeOffset?>("StartTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<string>("TagId")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<int>("TaskOrder")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("MissionRunId");

                            b1.ToTable("MissionTask");

                            b1.WithOwner()
                                .HasForeignKey("MissionRunId");

                            b1.OwnsMany("Api.Database.Models.Inspection", "Inspections", b2 =>
                                {
                                    b2.Property<string>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("AnalysisTypes")
                                        .HasMaxLength(250)
                                        .HasColumnType("nvarchar(250)");

                                    b2.Property<DateTimeOffset?>("EndTime")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<int>("InspectionType")
                                        .HasColumnType("int");

                                    b2.Property<string>("InspectionUrl")
                                        .HasMaxLength(250)
                                        .HasColumnType("nvarchar(250)");

                                    b2.Property<string>("IsarStepId")
                                        .HasMaxLength(200)
                                        .HasColumnType("nvarchar(200)");

                                    b2.Property<string>("MissionTaskId")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<DateTimeOffset?>("StartTime")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<int>("Status")
                                        .HasColumnType("int");

                                    b2.Property<float?>("VideoDuration")
                                        .HasColumnType("real");

                                    b2.HasKey("Id");

                                    b2.HasIndex("MissionTaskId");

                                    b2.ToTable("Inspection");

                                    b2.WithOwner()
                                        .HasForeignKey("MissionTaskId");
                                });

                            b1.OwnsOne("Api.Database.Models.Position", "InspectionTarget", b2 =>
                                {
                                    b2.Property<string>("MissionTaskId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("MissionTaskId");

                                    b2.ToTable("MissionTask");

                                    b2.WithOwner()
                                        .HasForeignKey("MissionTaskId");
                                });

                            b1.OwnsOne("Api.Database.Models.Pose", "RobotPose", b2 =>
                                {
                                    b2.Property<string>("MissionTaskId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.HasKey("MissionTaskId");

                                    b2.ToTable("MissionTask");

                                    b2.WithOwner()
                                        .HasForeignKey("MissionTaskId");

                                    b2.OwnsOne("Api.Database.Models.Orientation", "Orientation", b3 =>
                                        {
                                            b3.Property<string>("PoseMissionTaskId")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<float>("W")
                                                .HasColumnType("real");

                                            b3.Property<float>("X")
                                                .HasColumnType("real");

                                            b3.Property<float>("Y")
                                                .HasColumnType("real");

                                            b3.Property<float>("Z")
                                                .HasColumnType("real");

                                            b3.HasKey("PoseMissionTaskId");

                                            b3.ToTable("MissionTask");

                                            b3.WithOwner()
                                                .HasForeignKey("PoseMissionTaskId");
                                        });

                                    b2.OwnsOne("Api.Database.Models.Position", "Position", b3 =>
                                        {
                                            b3.Property<string>("PoseMissionTaskId")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<float>("X")
                                                .HasColumnType("real");

                                            b3.Property<float>("Y")
                                                .HasColumnType("real");

                                            b3.Property<float>("Z")
                                                .HasColumnType("real");

                                            b3.HasKey("PoseMissionTaskId");

                                            b3.ToTable("MissionTask");

                                            b3.WithOwner()
                                                .HasForeignKey("PoseMissionTaskId");
                                        });

                                    b2.Navigation("Orientation")
                                        .IsRequired();

                                    b2.Navigation("Position")
                                        .IsRequired();
                                });

                            b1.Navigation("InspectionTarget")
                                .IsRequired();

                            b1.Navigation("Inspections");

                            b1.Navigation("RobotPose")
                                .IsRequired();
                        });

                    b.Navigation("Area");

                    b.Navigation("Map");

                    b.Navigation("Robot");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Api.Database.Models.Plant", b =>
                {
                    b.HasOne("Api.Database.Models.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Installation");
                });

            modelBuilder.Entity("Api.Database.Models.Robot", b =>
                {
                    b.HasOne("Api.Database.Models.Area", "CurrentArea")
                        .WithMany()
                        .HasForeignKey("CurrentAreaId");

                    b.HasOne("Api.Database.Models.RobotModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Api.Database.Models.Pose", "Pose", b1 =>
                        {
                            b1.Property<string>("RobotId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("RobotId");

                            b1.ToTable("Robots");

                            b1.WithOwner()
                                .HasForeignKey("RobotId");

                            b1.OwnsOne("Api.Database.Models.Orientation", "Orientation", b2 =>
                                {
                                    b2.Property<string>("PoseRobotId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("W")
                                        .HasColumnType("real");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("PoseRobotId");

                                    b2.ToTable("Robots");

                                    b2.WithOwner()
                                        .HasForeignKey("PoseRobotId");
                                });

                            b1.OwnsOne("Api.Database.Models.Position", "Position", b2 =>
                                {
                                    b2.Property<string>("PoseRobotId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("PoseRobotId");

                                    b2.ToTable("Robots");

                                    b2.WithOwner()
                                        .HasForeignKey("PoseRobotId");
                                });

                            b1.Navigation("Orientation")
                                .IsRequired();

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsMany("Api.Database.Models.VideoStream", "VideoStreams", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("RobotId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<bool>("ShouldRotate270Clockwise")
                                .HasColumnType("bit");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("Id");

                            b1.HasIndex("RobotId");

                            b1.ToTable("VideoStream");

                            b1.WithOwner()
                                .HasForeignKey("RobotId");
                        });

                    b.Navigation("CurrentArea");

                    b.Navigation("Model");

                    b.Navigation("Pose")
                        .IsRequired();

                    b.Navigation("VideoStreams");
                });

            modelBuilder.Entity("Api.Database.Models.SafePosition", b =>
                {
                    b.HasOne("Api.Database.Models.Area", null)
                        .WithMany("SafePositions")
                        .HasForeignKey("AreaId");

                    b.OwnsOne("Api.Database.Models.Pose", "Pose", b1 =>
                        {
                            b1.Property<string>("SafePositionId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("SafePositionId");

                            b1.ToTable("SafePositions");

                            b1.WithOwner()
                                .HasForeignKey("SafePositionId");

                            b1.OwnsOne("Api.Database.Models.Orientation", "Orientation", b2 =>
                                {
                                    b2.Property<string>("PoseSafePositionId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("W")
                                        .HasColumnType("real");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("PoseSafePositionId");

                                    b2.ToTable("SafePositions");

                                    b2.WithOwner()
                                        .HasForeignKey("PoseSafePositionId");
                                });

                            b1.OwnsOne("Api.Database.Models.Position", "Position", b2 =>
                                {
                                    b2.Property<string>("PoseSafePositionId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("X")
                                        .HasColumnType("real");

                                    b2.Property<float>("Y")
                                        .HasColumnType("real");

                                    b2.Property<float>("Z")
                                        .HasColumnType("real");

                                    b2.HasKey("PoseSafePositionId");

                                    b2.ToTable("SafePositions");

                                    b2.WithOwner()
                                        .HasForeignKey("PoseSafePositionId");
                                });

                            b1.Navigation("Orientation")
                                .IsRequired();

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.Navigation("Pose")
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Database.Models.Area", b =>
                {
                    b.Navigation("SafePositions");
                });
#pragma warning restore 612, 618
        }
    }
}
