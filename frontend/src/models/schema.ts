/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/robots': {
        /**
         * ### Overview
         * List all robots on the asset
         */
        get: operations['getRobots']
        /**
         * ### Overview
         * Create a new robot entry in the database.
         *
         * The robot will be added as an active robot and will be included in the frontend.
         */
        post: operations['postRobot']
    }
    '/robots/{robot_id}': {
        /**
         * ### Overview
         * Lookup robot by specified id.
         */
        get: operations['getRobotById']
    }
    '/robots/{robot_id}/streaming': {
        /**
         * ### Overview
         * Lookup information of real-time data streaming.
         *
         * Describes the protocol used for distributing real time data and neccesary information for connecting to the information sources.
         */
        get: operations['getRobotStream']
    }
    '/robots/{robot_id}/start/{mission_id}': {
        /**
         * ### Overview
         * Start a mission with given id using robot with robot id.
         */
        post: operations['postStartRobot']
    }
    '/robots/{robot_id}/stop': {
        /**
         * ### Overview
         * Stop the execution of the current active mission.
         *
         * If there is no active mission on robot, nothing happens.
         */
        post: operations['postStopRobot']
    }
    '/robots/{robot_id}/enable': {
        /**
         * ### Overview
         * Enable or disable an existing robot.
         *
         * Being enabled implies that the robot is available in operation and will be visible to users in Flotilla.
         */
        post: operations['postEnableRobot']
    }
    '/missions': {
        /**
         * ### Overview
         * List all available missions on the asset in the Echo mission planner
         */
        get: operations['getMissions']
    }
    '/missions/{mission_id}': {
        /**
         * ### Overview
         * Lookup mission by specified id
         */
        get: operations['getMissionById']
    }
    '/events': {
        /**
         * ### Overview
         * Lookup events.
         * The `start_time` defaults to the current time, `end_time` defaults to `start_time` + 7 days. If no `robot_id` is provided, events for all enabled robots on the asset is included.
         */
        get: operations['getEvent']
        /**
         * ### Overview
         * Adds a new event to the robot schedule
         *
         * New entries to the schedule can be added as long as they do not conflict with already scheduled events.
         */
        post: operations['postEvent']
    }
    '/events/{event_id}': {
        /**
         * ### Overview
         * Lookup event with specified id.
         *
         * Can only be used for events that have not started yet.
         */
        get: operations['getEventById']
        /**
         * ### Overview
         * Deletes an event from the robot schedule.
         *
         * Can only be used for events that have not started yet.
         */
        delete: operations['deleteEventById']
    }
    '/map/{x_coord}/{y_coord}/{z_coord}': {
        /**
         * ### Overview
         * Finds the appropriate map based on the coordinates.
         */
        get: operations['getMap']
    }
    '/reports': {
        /**
         * ### Overview
         * List all available reports on the asset. `start_time` defaults to current time - 7 days and `end_time` defaults to current time. If no value for `robot_id` is provided, reports for all robots on the asset is provided.
         */
        get: operations['getReports']
    }
    '/reports/{report_id}': {
        /**
         * ### Overview
         * Lookup report by id
         */
        get: operations['getReportById']
    }
}

export interface components {
    schemas: {
        RobotRequest: {
            /**
             * @description Name of robot
             * @example Terminator
             */
            name: string
            /**
             * @description Model of robot
             * @example Turtlebot
             */
            model: string
            /**
             * @description Serial number of the robot
             * @example CE0460ROBOT
             */
            serial_number: string
            /**
             * @description Host address where the robot ISAR instance is reachable
             * @example localhost
             */
            host: string
            /**
             * Format: int32
             * @description Port on the host in which the robot ISAR instance is reachable
             * @example 3000
             */
            port: number
            /**
             * @description Whether the robot is enabled and available for scheduling missions
             * @example true
             */
            enabled: boolean
            /**
             * @description Status of robot
             * @enum {string}
             */
            status: 'available' | 'offline' | 'mission_in_progress'
            capabilities: ('thermal_image' | 'image' | 'audio')[]
        }
        Robot: components['schemas']['RobotRequest'] & {
            /**
             * Format: int32
             * @description Id of robot
             * @example 1
             */
            id: number
        }
        Mission: {
            /**
             * Format: int32
             * @description Echo Mission Id
             * @example 122
             */
            id: number
            /**
             * @description Name of mission in Echo
             * @example Valve Inspection Round
             */
            name: string
            /**
             * Format: uri
             * @description Link to mission in Echo
             * @example https://echo.equinor.com/mp?editId=122
             */
            link: string
            tags: components['schemas']['Tag'][]
        }
        Report: {
            /**
             * Format: int32
             * @description Id of report
             * @example 1
             */
            id: number
            /**
             * Format: date-time
             * @description Start time of mission
             * @example 2022-01-12T10:33:33Z
             */
            startTime: string
            /**
             * Format: date-time
             * @description End time of mission
             * @example 2022-01-12T10:33:33Z
             */
            endTime: string | null
            /**
             * Format: int32
             * @description Id of robot performing mission
             * @example 1
             */
            robotId: number
            /**
             * Format: int32
             * @description Id of mission
             * @example 221
             */
            missionId: number
            /**
             * @description Status for mission
             * @enum {string}
             */
            status: 'completed' | 'active' | 'aborted'
            entries: components['schemas']['ReportEntry'][]
        }
        Map: {
            /**
             * Format: int32
             * @description Id of map
             * @example 1
             */
            id: number
            /**
             * Format: byte
             * @description Byte representation of image of 2D Map
             * @example b4345xbnf32b...
             */
            data: string
            coordinates: components['schemas']['Coordinates']
        }
        Tag: {
            /**
             * @description Stid Id for inspection tag
             * @example 123-AA-354
             */
            tagId: string
            /**
             * @description Link to tag in Echo
             * @example https://echo.equinor.com/tag/313-AA-243
             */
            link?: string
            inspectionTypes: ('thermal_image' | 'image' | 'audio')[]
        }
        ReportEntry: {
            /**
             * Format: int32
             * @description Id of report entry
             * @example 1
             */
            id: number
            /**
             * @description Tag Id of inspection
             * @example 123-AA-354
             */
            tagId: string
            /**
             * @description Status for inspection of tag
             * @enum {string}
             */
            status: 'completed' | 'failed'
            /**
             * @description Valid inspection types
             * @enum {string}
             */
            inspectionType: 'thermal_image' | 'image' | 'audio'
            /**
             * Format: date-time
             * @description Time Stamp of inspection
             * @example 2022-01-12T10:33:33Z
             */
            time: string
            /**
             * Format: uri
             * @description HTTPS link to inspection result
             * @example https://equinor.com
             */
            link?: string
        }
        Coordinates: {
            /**
             * @description Reference system for coordinates
             * @example EQUINOR:4100001
             */
            referenceSystem: string
            /**
             * Format: float
             * @description Minimum x coordinate in asset frame covered by map
             * @example 25.4
             */
            xMin: number
            /**
             * Format: float
             * @description Maximum x-coordinate in asset frame covered by map
             * @example 254.3
             */
            xMax: number
            /**
             * Format: float
             * @description Minimum y-coordinate in asset frame covered by map
             * @example -10.3
             */
            yMin: number
            /**
             * Format: float
             * @description Maximum x-coordinate in asset frame covered by map
             */
            yMax: number
        }
        Stream: {
            /**
             * @description Protocol used for streaming real time data
             * @enum {string}
             */
            protocol: 'MQTT'
            /**
             * Format: ipv4
             * @description IP-address of host
             * @example 192.0.2.146
             */
            host: string
            /**
             * @description Port number used
             * @example 1888
             */
            port: string
            topics: components['schemas']['Topic'][]
        }
        Topic: {
            /** @example robot/pose */
            path: string
            /** @enum {string} */
            resource: 'battery' | 'pose'
        }
        Schedule: {
            /**
             * Format: int32
             * @description Robot id for schedule
             * @example 1
             */
            robotId: number
            /**
             * Format: date
             * @description Start date for schedule
             * @example 2022-01-12
             */
            startDate: string
            /**
             * Format: date
             * @description End date for schedule
             * @example 2022-01-19
             */
            endDate: string
            events: components['schemas']['Event'][]
        }
        Event: {
            /**
             * Format: int32
             * @description Id of event
             * @example 1
             */
            id: number
            /**
             * Format: uuid
             * @description Series id if the schedule entry is a part of a series
             * @example 1b69b353-95ff-402e-9864-a5acf5bd9ddb
             */
            seriesId?: string | null
            /**
             * Format: int32
             * @description Id of robot
             * @example 231
             */
            robotId: number
            /**
             * Format: int32
             * @description Id of mission in echo
             * @example 231
             */
            missionId: number
            /**
             * Format: date-time
             * @description Start time for scheduled mission in local time
             * @example 2022-01-12T10:33:33Z
             */
            startTime: string
            /**
             * Format: date-time
             * @description Expected end time for scheduled mission in local time
             * @example 2022-01-13T10:33:33Z
             */
            endTime: string
        }
        PostResponse: {
            /** @enum {string} */
            status?: 'success'
        }
        CreateRobotResponse: {
            /**
             * Format: int32
             * @description Id of the robot added to the database
             * @example 1
             */
            robot_id?: number
        }
        EventRequest: {
            /**
             * Format: int32
             * @description Id of robot
             * @example 1
             */
            robotId: number
            /**
             * Format: int32
             * @description Id of echo mission
             * @example 1
             */
            missionId: number
            /**
             * Format: date-time
             * @description Start time of event in local time
             * @example 2022-01-01T08:33:33Z
             */
            startTime: string
        }
        StartResponse: {
            /**
             * @description Request status
             * @enum {string}
             */
            status?: 'success'
            /**
             * Format: int32
             * @description Id of created report
             * @example 1
             */
            reportId: number
        }
        Error: {
            detail?: string
        }
        Success: {
            detail?: string
        }
    }
    responses: {
        /** Success */
        Success: {
            content: {
                'application/json': components['schemas']['Success']
            }
        }
        /** Created */
        Created: {
            content: {
                'application/json': components['schemas']['Success']
            }
        }
        /** Not Found */
        NotFound: {
            content: {
                'application/json': components['schemas']['Error']
            }
        }
        /** Unauthorized */
        Unauthorized: {
            content: {
                'application/json': components['schemas']['Error']
            }
        }
        /** Forbidden */
        Forbidden: {
            content: {
                'application/json': components['schemas']['Error']
            }
        }
        /** Conflict */
        Conflict: {
            content: {
                'application/json': components['schemas']['Error']
            }
        }
        /** Unexpected error */
        Unexpected: {
            content: {
                'application/json': components['schemas']['Error']
            }
        }
    }
    parameters: {
        /** @description api-version must be present in all request as part of the query string */
        apiVersion: 'v1'
    }
}

export interface operations {
    /**
     * ### Overview
     * List all robots on the asset
     */
    getRobots: {
        parameters: {
            query: {
                page?: number
                page_size?: number
            }
        }
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Robot'][]
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Create a new robot entry in the database.
     *
     * The robot will be added as an active robot and will be included in the frontend.
     */
    postRobot: {
        responses: {
            /** Succesfully added robot to database */
            200: {
                content: {
                    'application/json': components['schemas']['CreateRobotResponse']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            default: components['responses']['Unexpected']
        }
        /** Robot details */
        requestBody: {
            content: {
                'application/json': components['schemas']['RobotRequest']
            }
        }
    }
    /**
     * ### Overview
     * Lookup robot by specified id.
     */
    getRobotById: {
        parameters: {
            path: {
                robot_id: number
            }
        }
        responses: {
            /** Request successful and robot returned */
            200: {
                content: {
                    'application/json': components['schemas']['Robot']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Lookup information of real-time data streaming.
     *
     * Describes the protocol used for distributing real time data and neccesary information for connecting to the information sources.
     */
    getRobotStream: {
        parameters: {
            path: {
                robot_id: number
            }
        }
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Stream']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
        }
    }
    /**
     * ### Overview
     * Start a mission with given id using robot with robot id.
     */
    postStartRobot: {
        parameters: {
            path: {
                robot_id: number
                mission_id: number
            }
        }
        responses: {
            /** Mission succesfully started */
            200: {
                content: {
                    'application/json': components['schemas']['StartResponse']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            409: components['responses']['Conflict']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Stop the execution of the current active mission.
     *
     * If there is no active mission on robot, nothing happens.
     */
    postStopRobot: {
        parameters: {
            path: {
                robot_id: number
            }
        }
        responses: {
            200: components['responses']['Success']
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Enable or disable an existing robot.
     *
     * Being enabled implies that the robot is available in operation and will be visible to users in Flotilla.
     */
    postEnableRobot: {
        parameters: {
            path: {
                robot_id: number
            }
            query: {
                enable?: boolean
            }
        }
        responses: {
            200: components['responses']['Success']
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * List all available missions on the asset in the Echo mission planner
     */
    getMissions: {
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Mission'][]
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Lookup mission by specified id
     */
    getMissionById: {
        parameters: {
            path: {
                mission_id: number
            }
        }
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Mission']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Lookup events.
     * The `start_time` defaults to the current time, `end_time` defaults to `start_time` + 7 days. If no `robot_id` is provided, events for all enabled robots on the asset is included.
     */
    getEvent: {
        parameters: {
            query: {
                robot_id?: number
                start_time?: string
                end_time?: string
                page?: number
                page_size?: number
            }
        }
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Event'][]
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Adds a new event to the robot schedule
     *
     * New entries to the schedule can be added as long as they do not conflict with already scheduled events.
     */
    postEvent: {
        responses: {
            /** Created */
            201: {
                content: {
                    'application/json': components['schemas']['Event']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            409: components['responses']['Conflict']
            default: components['responses']['Unexpected']
        }
        /** Time entry update */
        requestBody: {
            content: {
                'application/json': components['schemas']['EventRequest']
            }
        }
    }
    /**
     * ### Overview
     * Lookup event with specified id.
     *
     * Can only be used for events that have not started yet.
     */
    getEventById: {
        parameters: {
            path: {
                event_id: number
            }
        }
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Event']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Deletes an event from the robot schedule.
     *
     * Can only be used for events that have not started yet.
     */
    deleteEventById: {
        parameters: {
            path: {
                event_id: number
            }
        }
        responses: {
            /** Event successfully deleted */
            204: never
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Finds the appropriate map based on the coordinates.
     */
    getMap: {
        parameters: {
            path: {
                x_coord: number
                y_coord: number
                z_coord: number
            }
        }
        responses: {
            /** Request successful */
            200: {
                content: {
                    'application/json': components['schemas']['Map']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * List all available reports on the asset. `start_time` defaults to current time - 7 days and `end_time` defaults to current time. If no value for `robot_id` is provided, reports for all robots on the asset is provided.
     */
    getReports: {
        parameters: {
            query: {
                robot_id?: number
                start_time?: string
                end_time?: string
                status?: 'completed' | 'active' | 'aborted'
                page?: number
                page_size?: number
            }
        }
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': components['schemas']['Report'][]
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
    /**
     * ### Overview
     * Lookup report by id
     */
    getReportById: {
        parameters: {
            path: {
                report_id: number
            }
        }
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': components['schemas']['Report']
                }
            }
            401: components['responses']['Unauthorized']
            403: components['responses']['Forbidden']
            404: components['responses']['NotFound']
            default: components['responses']['Unexpected']
        }
    }
}

export interface external {}
